package tud.jdbc_movies.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import tud.jdbc_movies.domain.Character;

public class CharacterManager {
	
	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";

	private String createTableCharacter = "CREATE TABLE Character(id bigint GENERATED BY DEFAULT AS IDENTITY,"
			+ "name VARCHAR(30), quality VARCHAR(40), type VARCHAR(30), FOREIGN KEY (movieFK) "
			+ "REFERENCES PUBLIC.MOVIE(id) ON DELETE CASCADE ON UPDATE CASCADE)";
	
	private PreparedStatement addCharacterStmt;
	private PreparedStatement deleteCharacterStmt;
	private PreparedStatement editCharacterStmt;
	private PreparedStatement deleteAllCharactersStmt;
	private PreparedStatement getAllCharactersStmt;
	private PreparedStatement getCharacterStmt;
	
	private Statement statement;
	
	public CharacterManager() {
		
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,null);
			boolean tableExists = false;
			
			while (rs.next()) {
				if ("Character".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(createTableCharacter);
			
			addCharacterStmt = connection
					.prepareStatement("INSERT INTO Character (name, quality, type, movieFK) "
							+ "VALUES (?, ?, ?, ?)");
			deleteCharacterStmt = connection
					.prepareStatement("DELETE FROM Character where id=?");
			editCharacterStmt = connection
					.prepareStatement("UPDATE Character SET name=?, quality=?, type=?, movieFK=?");
			deleteAllCharactersStmt = connection
					.prepareStatement("DELETE FROM Character");
			getAllCharactersStmt = connection
					.prepareStatement("SELECT id, name, quality, type, movieFK FROM Character");
			getCharacterStmt = connection
					.prepareStatement("SELECT id, name, quality, type, movieFK FROM Character "
							+ "WHERE id=?");
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}

	
	Connection getConnection() {
		return connection;
	}
	
	
	public int addCharacter(Character character) {
		int count = 0;
		
		try {
			addCharacterStmt.setString(1, character.getName());
			addCharacterStmt.setString(2, character.getQuality());
			addCharacterStmt.setString(3, character.getType());
			addCharacterStmt.setInt(4, character.getMovieFK());

			count = addCharacterStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;		
	}
	
	public int deleteCharacter(long id) {		
		int count = 0;
		
		try {
			deleteCharacterStmt.setLong(1, id);
			count = deleteCharacterStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;	
	}
	
	public int editCharacter(Character character) {
		int count = 0;
		
		try {
			editCharacterStmt.setString(1, character.getName());
			editCharacterStmt.setString(2, character.getQuality());
			editCharacterStmt.setString(3, character.getType());
			editCharacterStmt.setInt(4, character.getMovieFK());

			count = editCharacterStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	void deleteAllCharacters() {
		try {
			deleteAllCharactersStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public List<Character> getAllCharacters() {
		List<Character> characters = new ArrayList<Character>();

		try {
			ResultSet rs = getAllCharactersStmt.executeQuery();

			while (rs.next()) {
				Character c = new Character();
				c.setId(rs.getInt("id"));
				c.setName(rs.getString("name"));
				c.setQuality(rs.getString("quality"));
				c.setType(rs.getString("type"));
				c.setMovieFK(rs.getInt("movieFK"));
				characters.add(c);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return characters;
	}
	
	public Character getCharacter(long id) {
		Character c = new Character();

		try {
			getCharacterStmt.setLong(1, id);
			ResultSet rs = getCharacterStmt.executeQuery();
			while (rs.next()) {		
				
				c.setId(rs.getInt("id"));
				c.setName(rs.getString("name"));
				c.setQuality(rs.getString("quality"));
				c.setType(rs.getString("type"));
				c.setMovieFK(rs.getInt("movieFK"));
				
			}

		} catch (SQLException e) {
			e.printStackTrace();
			return null;
		}
		return c;
	}
	
}
